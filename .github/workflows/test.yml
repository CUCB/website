name: Build/Test/Deploy

on:
  push:

jobs:
  svelte-check:
    name: Type-check svelte
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Create dummy .env file
        run: |
          echo "SESSION_SECRET=somethingreallynotsecret" > .env
      - name: Run svelte-check
        run: |
          npm ci
          npm run build
          npm run svelte-check
  test:
    name: Cypress run
    runs-on: ubuntu-16.04
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 4 copies of the current job in parallel
        containers: [1, 2, 3, 4]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # because of "record" and "parallel" parameters
      # these containers will load balance all found tests among themselves
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          record: true
          parallel: true
          group: "Linux/Chrome"
          start: docker-compose -f docker-compose.test.yml -f docker-compose.ci.yml up --exit-code-from=cypress
          wait-on: "http://localhost:4000"
          wait-on-timeout: 240
          # the entire command will automatically be prefixed with "npm"
          # and we need the second "npm" to execute "cypress run ..." command line
          command-prefix: "percy exec -- npx"
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_KEY: ${{ secrets.CYPRESS_KEY }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # See https://dev.to/digitaledawn/github-action-cypress-and-percy-parallelisation-setup-484a for percy setup
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          PERCY_PARALLEL_TOTAL: 4
          PERCY_PARALLEL_NONCE: "${{ github.event_name }}-${{ github.sha }}"
          PERCY_BRANCH: ${{ github.head_ref }}
          COMMIT_INFO_BRANCH: ${{ github.head_ref }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-output
          path: |
            cypress/videos/**/*.mp4
            cypress/screenshots/**/*.png

  pulumi-preview:
    if: ${{ github.ref!='refs/heads/master' && github.ref!='refs/heads/feature/ansible-deployment'}}
    name: Preview infrastructure updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
      - run: cd deploy/pulumi && npm install
      - uses: pulumi/actions@v3
        with:
          command: preview
          stack-name: prod
          work-dir: deploy/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  build:
    if: ${{ github.ref=='refs/heads/master' || github.ref=='refs/heads/feature/ansible-deployment'}}
    needs:
      - test
      - svelte-check
    name: Build and push docker image for deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Login to registry
        run: docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

      - name: Build and tag image
        run: |
          echo "VITE_HCAPTCHA_SITE_KEY=$HCAPTCHA_SITE_KEY" >> build.env
          docker run -v "$PWD":/usr/src/app -w /usr/src/app node:12 npm install
          docker build -t $CI_REGISTRY/cucb/website:slim -f deploy/Dockerfile .
        env:
          HCAPTCHA_SITE_KEY: ${{ secrets.HCAPTCHA_SITE_KEY }}

      - name: Push image to registry
        run: docker push $CI_REGISTRY/cucb/website:slim

  pulumi:
    name: Create/update infrastructure
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    outputs:
      ip: ${{ steps.update.outputs.ip }}
    steps:
      - name: Set env to develop
        if: endsWith(github.ref, '/ansible-deployment')
        run: echo "::set-env name=ENVIRONMENT::dev"
      - name: Set env to production
        if: endsWith(github.ref, '/master')
        run: echo "::set-env name=ENVIRONMENT::prod"
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
      - run: cd deploy/pulumi && npm install
      - uses: pulumi/actions@v3
        id: update
        with:
          command: up
          stack-name: ${{ env.ENVIRONMENT }}
          work-dir: deploy/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  deploy-bash:
    if: ${{ github.ref=='refs/heads/master' }}
    name: Deploy site to DigitalOcean using bash
    runs-on: ubuntu-latest
    needs: pulumi
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy required SSH keys
        run: |
          ssh-keyscan $IP >> ~/.ssh/known_hosts
          echo "$DEPLOY_PULL_KEY" > deploy_pull
          scp deploy_pull root@$IP:.ssh/
          scp pulumi/ssh_keys/ci_login.pub root@$IP:.ssh/
          rm deploy_pull
        env:
          DEPLOY_PULL_KEY: ${{ secrets.DEPLOY_PULL_KEY }}

      # Source https://stackoverflow.com/a/58035262
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Copy environment secrets
        run: |
          echo "CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH" > sshenv
          echo "DEPLOY_REGISTRY=$CI_REGISTRY" >> sshenv
          echo "DEPLOY_REGISTRY_USER=$CI_REGISTRY_USER" >> sshenv
          echo "DEPLOY_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD" >> sshenv
          scp sshenv root@$IP:~/.ssh/environment
          echo "HCAPTCHA_SITE_KEY=$HCAPTCHA_SITE_KEY" > hcaptcha
          echo "HCAPTCHA_SECRET=$HCAPTCHA_SECRET" >> hcaptcha
          echo "export DROPBOX_ACCESS_TOKEN=$DROPBOX_ACCESS_TOKEN" > dropbox_access_token
          ssh root@$IP "mkdir -p .env"
          scp hcaptcha root@$IP:.env/hcaptcha
          scp dropbox_access_token root@$IP:.env/dropbox_access_token
          rm dropbox_access_token
          echo "CLOUDFLARE_EMAIL=webmaster@cucb.co.uk" > cloudflare_api_key
          echo "CLOUDFLARE_API_KEY=$CLOUDFLARE_API_KEY" >> cloudflare_api_key
          scp cloudflare_api_key root@$IP:.env/cloudflare_api_key
          rm cloudflare_api_key
        env:
          CI_COMMIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          HCAPTCHA_SECRET: ${{ secrets.HCAPTCHA_SECRET }}
          HCAPTCHA_SITE_KEY: ${{ secrets.HCAPTCHA_SITE_KEY }}
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}

      - name: Copy and run deploy script
        run: |
          scp deploy.sh root@$IP:deploy.sh
          ssh root@$IP "chmod +x deploy.sh && ./deploy.sh"
    env:
      IP: ${{ needs.pulumi.outputs.ip }}

  deploy-ansible:
    if: ${{ github.ref=='refs/heads/ansible-deployment' }}
    name: Deploy site to DigitalOcean using ansible
    runs-on: ubuntu-latest
    needs: pulumi
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'

      - name: Install dependencies
        run: |
          pip install ansible
          ansible-galaxy collection install -r deploy/ansible/requirements.yml

      - name: Play ansible playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: deploy/ansible/playbook.yml
          inventory: |
            kit.cucb.co.uk
          options: |
            --extra-vars ${{ format('deploy_registry={0}', secrets.CI_REGISTRY) }}
            --extra-vars ${{ format('deploy_registry_user={0}', secrets.CI_REGISTRY_USER) }}
            --extra-vars ${{ format('deploy_registry_password={0}', secrets.CI_REGISTRY_PASSWORD) }}
            --extra-vars ${{ format('ci_commit_branch={0}', secrets.CI_COMMIT_BRANCH) }}
            --extra-vars ${{ format('dropbox_access_token={0}', secrets.DROPBOX_ACCESS_TOKEN) }}
        env:
          ANSIBLE_HOST_KEY_CHECKING: "false"
          ANSIBLE_DEPRECATION_WARNINGS: "false"

env:
  CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
  CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
  CI_REGISTRY: ${{ secrets.CI_REGISTRY }}
