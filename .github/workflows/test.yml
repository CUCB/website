name: Build/Test/Deploy

on:
  push:

jobs:
  svelte-check:
    name: Type-check svelte
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Create dummy .env file
        run: |
          echo "SESSION_SECRET=somethingreallynotsecret" > .env
      - name: Run svelte-check
        run: |
          npm ci
          npm run svelte-check
  unique_id:
    name: "Generate unique ID for workflow run"
    runs-on: ubuntu-latest
    steps:
      - name: Generate unique id
        id: unique_id
        run: echo "::set-output name=id::$(uuidgen)"
    outputs:
      unique_id: ${{ steps.unique_id.outputs.id }}
  test:
    name: Cypress run
    runs-on: ubuntu-latest
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving the Dashboard hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 4 copies of the current job in parallel
        containers: [1, 2, 3, 4]
    needs:
      - unique_id
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          record: true
          parallel: true
          group: "Linux/Chrome"
          start: docker-compose -f docker-compose.test.yml -f docker-compose.ci.yml up --exit-code-from=cypress
          wait-on: "http://localhost:3000"
          wait-on-timeout: 240
          command-prefix: "percy exec -- npx"
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_KEY: ${{ secrets.CYPRESS_KEY }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # See https://dev.to/digitaledawn/github-action-cypress-and-percy-parallelisation-setup-484a for percy setup
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          PERCY_PARALLEL_TOTAL: 4
          # We need a uuid (as mentioned here https://github.com/actions/toolkit/issues/65#issuecomment-718134668) to uniquely identify re-runs)
          PERCY_PARALLEL_NONCE: "${{ github.event_name }}-${{ github.sha }}-${{ needs.unique_id.outputs.unique_id }}"
          PERCY_BRANCH: ${{ github.head_ref }}
          COMMIT_INFO_BRANCH: ${{ github.head_ref }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-output
          path: |
            cypress/videos/**/*.mp4
            cypress/screenshots/**/*.png

  build:
    if: ${{ github.ref=='refs/heads/master' }}
    needs:
      - test
      - svelte-check
    name: Build and push docker image for deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Login to registry
        run: docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

      - name: Build and tag image
        run: |
          echo "VITE_HCAPTCHA_SITE_KEY=$HCAPTCHA_SITE_KEY" >> build.env
          docker run -v "$PWD":/usr/src/app -w /usr/src/app node:12 npm install
          docker build -t $CI_REGISTRY/cucb/$IMAGE_NAME:slim -f deploy/Dockerfile .
        env:
          HCAPTCHA_SITE_KEY: ${{ secrets.HCAPTCHA_SITE_KEY }}

      - name: Push image to registry
        run: docker push $CI_REGISTRY/cucb/$IMAGE_NAME:slim
    env:
      IMAGE_NAME: sveltekit

  pulumi-preview:
    if: ${{ github.ref != 'refs/heads/master' }}
    name: Preview infrastructure updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
      - run: cd deploy/pulumi && npm install
      - uses: pulumi/actions@v3
        with:
          command: preview
          stack-name: prod
          work-dir: deploy/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  pulumi:
    name: Create/update infrastructure
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    outputs:
      ip: ${{ steps.update.outputs.ip }}
    steps:
      - name: Set env to develop
        if: endsWith(github.ref, '/sveltekit-beta')
        run: echo "ENVIRONMENT=dev" >> $GITHUB_ENV
      - name: Set env to production
        if: endsWith(github.ref, '/master')
        run: echo "ENVIRONMENT=prod" >> $GITHUB_ENV
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Install Pulumi CLI
        uses: pulumi/action-install-pulumi-cli@v1.0.1
      - run: cd deploy/pulumi && npm install
      - uses: pulumi/actions@v3
        id: update
        with:
          command: up
          stack-name: ${{ env.ENVIRONMENT }}
          work-dir: deploy/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  deploy-ansible:
    if: ${{ github.ref=='refs/heads/master' }}
    name: Deploy site to DigitalOcean using ansible
    runs-on: ubuntu-latest
    needs: pulumi
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
          architecture: "x64"

      - name: Install dependencies
        run: |
          pip install ansible
          ansible-galaxy collection install -r deploy/ansible/requirements.yml

      - name: Write deploy key to disk
        run: echo "$DEPLOY_PULL_KEY" > deploy/ansible/deploy_pull
        env:
          DEPLOY_PULL_KEY: ${{ secrets.DEPLOY_PULL_KEY }}

      # Source https://stackoverflow.com/a/58035262
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Play ansible playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: deploy/ansible/playbook.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          inventory: |
            ${{ needs.pulumi.outputs.IP }}
          options: |
            --extra-vars ${{ format('deploy_registry={0}', secrets.CI_REGISTRY) }}
            --extra-vars ${{ format('deploy_registry_user={0}', secrets.CI_REGISTRY_USER) }}
            --extra-vars ${{ format('deploy_registry_password={0}', secrets.CI_REGISTRY_PASSWORD) }}
            --extra-vars ${{ format('ci_commit_branch={0}', steps.extract_branch.outputs.branch) }}
            --extra-vars ${{ format('dropbox_access_token={0}', secrets.DROPBOX_ACCESS_TOKEN) }}
            --extra-vars ${{ format('hcaptcha_secret={0}', secrets.HCAPTCHA_SECRET) }}
        env:
          ANSIBLE_HOST_KEY_CHECKING: "false"
          ANSIBLE_DEPRECATION_WARNINGS: "false"

      - name: Remove deploy key
        run: rm deploy/ansible/deploy_pull

env:
  CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
  CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
  CI_REGISTRY: ${{ secrets.CI_REGISTRY }}
