name: Build/Test/Deploy

on:
  push:

jobs:
  build:
    #if: ${{ github.ref=='refs/heads/master' || github.ref=='refs/heads/feature/gh-deploy' }}
    if: false
    name: Build and push docker image for deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('package*.json') }}

      - name: Login to registry
        run: docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

      - name: Build and tag image
        run: |
          echo "HCAPTCHA_SITE_KEY=$HCAPTCHA_SITE_KEY" >> build.env
          docker run -v "$PWD":/usr/src/app -w /usr/src/app node:12 npm install
          docker build -t $CI_REGISTRY/cucb/website:latest -f deploy/Dockerfile .

      - name: Push image to registry
        run: docker push $CI_REGISTRY/cucb/website:latest
  test:
    if: false
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Start server and run tests
        run: docker-compose -f docker-compose.test.yml -f docker-compose.ci.yml up --exit-code-from=cypress
        env:
          CYPRESS_KEY: ${{ secrets.CYPRESS_KEY }}
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-output
          path: |
            cypress/videos/**/*.mp4
            cypress/screenshots/**/*.png
  pulumi:
    if: always()
    name: Create/update infrastructure
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    outputs:
      ip: ${{ steps.update.outputs.ip }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Update infrastructure
        id: update
        run: |
          chmod +x ./pulumi/scripts/*.sh
          ./pulumi/scripts/setup.sh
          ./pulumi/scripts/run.sh
          cd pulumi
          echo "::set-output name=ip::$(pulumi stack output ip)"
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  deploy:
    name: Deploy site to DigitalOcean
    runs-on: ubuntu-latest
    needs: pulumi
    steps:
      - name: Setup SSH
        run: |
          which ssh-agent || (apt update && apt install -qq openssh-client)
          eval $(ssh-agent -s)
          ssh-add <(echo "$SSH_PRIVATE_KEY")
          mkdir -p ~/.ssh
          '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

      - name: Copy required SSH keys
        run: |
          echo "$DEPLOY_PULL_KEY" > deploy_pull
          scp deploy_pull root@$IP:.ssh/
          scp pulumi/ssh_keys/ci_login.pub root@$IP:.ssh/
          rm deploy_pull
        env:
          DEPLOY_PULL_KEY: ${{ secrets.DEPLOY_PULL_KEY }}

      # Source https://stackoverflow.com/a/58035262
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Copy environment secrets
        run: |
          echo "CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH" > sshenv
          echo "DEPLOY_REGISTRY=$CI_REGISTRY" >> sshenv
          echo "DEPLOY_REGISTRY_USER=$CI_REGISTRY_USER" >> sshenv
          echo "DEPLOY_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD" >> sshenv
          scp sshenv root@$IP:~/.ssh/environment
          echo "HCAPTCHA_SITE_KEY=$HCAPTCHA_SITE_KEY" > hcaptcha
          echo "HCAPTCHA_SECRET=$HCAPTCHA_SECRET" >> hcaptcha
          echo "export DROPBOX_ACCESS_TOKEN=$DROPBOX_ACCESS_TOKEN" > dropbox_access_token
          ssh root@$IP "mkdir -p .env"
          scp hcaptcha root@$IP:.env/hcaptcha
          scp dropbox_access_token root@$IP:.env/dropbox_access_token
          rm dropbox_access_token
          echo "CLOUDFLARE_EMAIL=webmaster@cucb.co.uk" > cloudflare_api_key
          echo "CLOUDFLARE_API_KEY=$CLOUDFLARE_API_KEY" >> cloudflare_api_key
          scp cloudflare_api_key root@$IP:.env/cloudflare_api_key
          rm cloudflare_api_key
        env:
          CI_COMMIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          HCAPTCHA_SECRET: ${{ secrets.HCAPTCHA_SECRET }}
          HCAPTCHA_SITE_KEY: ${{ secrets.HCAPTCHA_SITE_KEY }}
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}

      - name: Copy and run deploy script
        run: |
          scp deploy.sh root@$IP:deploy.sh
          ssh root@$IP "chmod +x deploy.sh && ./deploy.sh"
    env:
      IP: ${{ needs.pulumi.outputs.ip }}

env:
  CI_REGISTRY_USER: ${{ secrets.CI_REGISTRY_USER }}
  CI_REGISTRY_PASSWORD: ${{ secrets.CI_REGISTRY_PASSWORD }}
  CI_REGISTRY: ${{ secrets.CI_REGISTRY }}
