version: "3.6"
services:
  postgres:
    image: postgres:12
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db_restore:/backups
    environment:
      POSTGRES_PASSWORD: ${PG_PASSWORD}
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3.cli-migrations-v2
    volumes:
      - ./hasura/migrations:/hasura-migrations
      - ./hasura/metadata:/hasura-metadata
    depends_on:
      - "postgres"
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${PG_PASSWORD}@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false" # use hasura cli console instead
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_AUTH_HOOK: http://sapper:3000/auth/hook
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
  postfix:
    image: davidepedranz/docker-send-only-postfix:latest
    environment:
      DOMAIN: cucb.co.uk
    volumes:
      - ${BLOCK_STORAGE}/mail/mail.private:/etc/opendkim/domainkeys/mail.private
  sapper:
    image: $DEPLOY_REGISTRY/cucb/sveltekit:slim
    environment:
      GRAPHQL_REMOTE: http://graphql-engine:8080
      GRAPHQL_PATH: /v1/graphql
      PG_USER: postgres
      PG_HOST: postgres
      PG_DATABASE: postgres
      PG_PORT: 5432
      PG_PASSWORD: ${PG_PASSWORD}
      SESSION_SECRET: ${SESSION_SECRET}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_SEND_ADDRESS: webmaster@cucb.co.uk
      VITE_HCAPTCHA_SITE_KEY: ${HCAPTCHA_SITE_KEY}
      EMAIL_SSL: "true"
      EMAIL_PORT: 587
      HCAPTCHA_SITE_KEY: ${HCAPTCHA_SITE_KEY}
      HCAPTCHA_SECRET: ${HCAPTCHA_SECRET}
    volumes:
      - ./static:/usr/src/app/static
    restart: always
    command: "node build"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
  caddy:
    image: caddy:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./Caddyfile.lib:/etc/caddy/Caddyfile.lib
      - ${BLOCK_STORAGE}/certs:/root/.caddy/certs
      - ./static/static:/srv/static
      - ${BLOCK_STORAGE}/images:/srv/images
      - ./docs:/srv/docs
    logging:
      driver: "json-file"
      options:
        max-size: "50m"

volumes:
  db_data:
  caddy:
